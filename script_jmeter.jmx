<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">..\lib\santander</stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="MYSQL" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DATABASE_URL" elementType="Argument">
            <stringProp name="Argument.name">DATABASE_URL</stringProp>
            <stringProp name="Argument.value">${__P(v_database_url,&quot;jdbc:mysql://mysql:3306/grafana&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__P(v_database_url,&quot;jdbc:mysql://mysql/grafana?serverTimezone=UTC&quot;)}</stringProp>
          </elementProp>
          <elementProp name="DATABASE_USR" elementType="Argument">
            <stringProp name="Argument.name">DATABASE_USR</stringProp>
            <stringProp name="Argument.value">${__P(v_database_usr,&quot;test&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">test</stringProp>
          </elementProp>
          <elementProp name="DATABASE_PWD" elementType="Argument">
            <stringProp name="Argument.name">DATABASE_PWD</stringProp>
            <stringProp name="Argument.value">${__P(v_database_pwd,&quot;test&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">test</stringProp>
          </elementProp>
          <elementProp name="DATABASE_APP" elementType="Argument">
            <stringProp name="Argument.name">DATABASE_APP</stringProp>
            <stringProp name="Argument.value">${__P(v_database_app,&quot;example.com&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Example.com</stringProp>
          </elementProp>
          <elementProp name="DATABASE_TST" elementType="Argument">
            <stringProp name="Argument.name">DATABASE_TST</stringProp>
            <stringProp name="Argument.value">${__P(v_database_tst,&quot;Santander Digital&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Santander Digital</stringProp>
          </elementProp>
          <elementProp name="ENVIRONMENT" elementType="Argument">
            <stringProp name="Argument.name">ENVIRONMENT</stringProp>
            <stringProp name="Argument.value">${__P(v_environment,&quot;PRE&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">PRE</stringProp>
          </elementProp>
          <elementProp name="NUM_THREADS" elementType="Argument">
            <stringProp name="Argument.name">NUM_THREADS</stringProp>
            <stringProp name="Argument.value">${__P(v_num_threads,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="RAMPUP_SECONDS" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP_SECONDS</stringProp>
            <stringProp name="Argument.value">${__P(v_rampup_seconds,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="DURATION_SECONDS" elementType="Argument">
            <stringProp name="Argument.name">DURATION_SECONDS</stringProp>
            <stringProp name="Argument.value">${__P(v_duration_seconds,1800)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">60</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables_Desarrollo" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="RUTA_BASE" elementType="Argument">
            <stringProp name="Argument.name">RUTA_BASE</stringProp>
            <stringProp name="Argument.value">D:\proyectos\bantech\test\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="#RUTA_BASE" elementType="Argument">
            <stringProp name="Argument.name">#RUTA_BASE</stringProp>
            <stringProp name="Argument.value">ruta_base_unix</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IP" elementType="Argument">
            <stringProp name="Argument.name">IP</stringProp>
            <stringProp name="Argument.value">example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PUERTO" elementType="Argument">
            <stringProp name="Argument.name">PUERTO</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">www.example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_PERIOD</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUM_USUARIOS" elementType="Argument">
            <stringProp name="Argument.name">NUM_USUARIOS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables_Desarrollo2" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">www.example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">www.example.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Inicializar_BBDD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Abrir_Conexion" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.sql.*;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import com.mysql.jdbc.Driver;

    try
    {
    	Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
    	 SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
      // create a mysql database connection
      String myDriver = &quot;com.mysql.jdbc.Driver&quot;;
      String myUrl = &quot;jdbc:mysql://mysql/grafana?serverTimezone=UTC+1&quot;;
      Class.forName(myDriver);
		String database_user = vars.get(&quot;DATABASE_USR&quot;);
		String database_pwd = vars.get(&quot;DATABASE_PWD&quot;);

     Connection conn = DriverManager.getConnection(myUrl, database_user, database_pwd);
	log.info(&quot;Openin Database Connection&quot;);

	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from application where name=&apos;&quot;+vars.get(&quot;DATABASE_APP&quot;)+&quot;&apos;&quot;);
	String idApp = &quot;&quot;;
	String idBuild = &quot;&quot;;
	String idExecution = &quot;&quot;;
	String idEnv = &quot;&quot;;
	
	if(rs.next()) {
		idApp = rs.getString(1);
		log.info(&quot;The application &apos;&quot;+appName+&quot;&apos; existed already in db. ID: &quot;+idApp);
	}else {
		rs.close();
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(&quot;INSERT INTO application (name,tst_domain) VALUES (&apos;&quot;+vars.get(&quot;DATABASE_APP&quot;)+&quot;&apos;,&apos;&quot;+vars.get(&quot;DATABASE_TST&quot;)+&quot;&apos;)&quot;, new String[]{&quot;id&quot;});
		rs = stmt.getGeneratedKeys();
		if(rs.next()) {
			idApp = rs.getString(1);
			log.info(&quot;The application &apos;&quot;+vars.get(&quot;DATABASE_APP&quot;)+&quot;&apos; has been inserted in db. ID: &quot;+idApp);
		}
	}
	rs.close();

	stmt = conn.createStatement();
	stmt.executeUpdate(&quot;INSERT INTO build (id_application,build_number,technology) VALUES (&quot;+idApp+&quot;,&quot;+0+&quot;,&apos;JMeter&apos;)&quot;, new String[]{&quot;id&quot;});
	rs = stmt.getGeneratedKeys();
	if (rs.next()) {
		idBuild = rs.getString(1);
		log.info(&quot;The build with build_number &apos;&quot;+0+&quot;&apos; has been inserted in db. ID: &quot;+idBuild);
	}

	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from environment where name=&apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos;&quot;);
	if(rs.next()) {
		idEnv = rs.getString(1);
		log.info(&quot;The environment &apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos; existed already in db. ID: &quot;+idEnv);
	}else {
		rs.close();
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(&quot;INSERT INTO environment (name) VALUES (&apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos;)&quot;, new String[]{&quot;id&quot;});
		rs = stmt.getGeneratedKeys();
		if(rs.next()) {
			idEnv = rs.getString(1);
			log.info(&quot;The environment &apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos; has been inserted in db. ID: &quot;+idEnv);
		}
	}
	rs.close();

	String idExec = &quot;&quot;;
	
	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from execution order by id DESC&quot;);
	if(rs.next()) {
		idExec = rs.getString(1);
	}
	
	//create table jmeter_metrics (
	//  sample_time timestamp,
	//  label varchar(90) not null,success
	//  success varchar(32) not null,
	//  response_code varchar(32) not null,
	//  response_time_ms int,
	//  primary key (sample_time,label)
	//);
	        
	
	long time = System.currentTimeMillis();
	java.sql.Timestamp ts = new java.sql.Timestamp(time);
	log.info(&quot;Time in milliseconds :&quot; + ts);
		 
     String query = &quot; insert into test (start_date, name, status, response_code, duration, id_suite, thread_group)&quot;
        + &quot; values (?, ?, ?, ?, ?, ?, ?)&quot;;
      // create the mysql insert preparedstatement
      PreparedStatement preparedStmt = conn.prepareStatement(query);
	
	props.put(&quot;databaseConn&quot;, conn);
	      // the mysql insert statement
	props.put(&quot;insertStatement&quot;, preparedStmt);
	props.put(&quot;idBuild&quot;, idBuild);
	props.put(&quot;iteration&quot;,0);
	props.put(&quot;idEnv&quot;,idEnv);
	props.put(&quot;lastExecId&quot;,idExec);
	      
	//      preparedStmt.setTimestamp   (1, ts);
	//      preparedStmt.setString (2, &quot;label1&quot;);
	//      preparedStmt.setString (3, &quot;true&quot;);
	//      preparedStmt.setString (4, &quot;200&quot;);
	//      preparedStmt.setInt    (5, 5000);
	
	      // execute the preparedstatement
	//      preparedStmt.execute();
      
      //conn.close();
    }
    catch (Exception e)
    {
      log.error(&quot;Got an exception!&quot;);
      log.info( &quot;print&quot; + e );
    }

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.sql.*;

    try
    {

    
	System.out.println(&quot;Inserting in database...&quot;);


//long time = Long.parseLong(vars.get(&quot;sample_timestamp&quot;));//System.currentTimeMillis();
//java.sql.Timestamp ts = new java.sql.Timestamp(time);
//System.out.println(&quot;Time in milliseconds :&quot; + ts);

//Connection conn = (Connection) props.get(&quot;databaseConn&quot;);
PreparedStatement preparedStmt = (PreparedStatement) props.get(&quot;insertStatement&quot;);

String isSuccessfull = &quot;OK&quot;;
if (!sampleResult.isSuccessful()) {
	vars.put(&quot;isSuccessfull&quot;,&quot;Error&quot;);
}

      // create the mysql insert preparedstatement
      preparedStmt.setTimestamp   (1, new java.sql.Timestamp(sampleResult.getTimeStamp()));
      preparedStmt.setString (2, sampleResult.getSampleLabel());
      preparedStmt.setString (3, isSuccessfull);
      preparedStmt.setString (4, sampleResult.getResponseCode());
      preparedStmt.setInt    (5, (int)sampleResult.getTime());

      // execute the preparedstatement
      preparedStmt.execute();
      
      //conn.close();
    }
    catch (Exception e)
    {
      System.err.println(&quot;Got an exception!&quot;);
      System.err.println(e.getMessage());
    }

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Listener>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="prueba" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.sql.*;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import com.mysql.jdbc.Driver;

    try
    {
    	Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
    	 SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
      // create a mysql database connection
      String myDriver = &quot;com.mysql.jdbc.Driver&quot;;
      String myUrl = &quot;jdbc:mysql://mysql/grafana?serverTimezone=UTC+1&quot;;
      Class.forName(myDriver);
		String database_user = vars.get(&quot;DATABASE_USR&quot;);
		String database_pwd = vars.get(&quot;DATABASE_PWD&quot;);

     Connection conn = DriverManager.getConnection(myUrl, database_user, database_pwd);
	log.info(&quot;Openin Database Connection&quot;);

	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from application where name=&apos;&quot;+vars.get(&quot;DATABASE_APP&quot;)+&quot;&apos;&quot;);
	String idApp = &quot;&quot;;
	String idBuild = &quot;&quot;;
	String idExecution = &quot;&quot;;
	String idEnv = &quot;&quot;;
	
	if(rs.next()) {
		idApp = rs.getString(1);
		log.info(&quot;The application &apos;&quot;+appName+&quot;&apos; existed already in db. ID: &quot;+idApp);
	}else {
		rs.close();
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(&quot;INSERT INTO application (name,tst_domain) VALUES (&apos;&quot;+vars.get(&quot;DATABASE_APP&quot;)+&quot;&apos;,&apos;&quot;+vars.get(&quot;DATABASE_TST&quot;)+&quot;&apos;)&quot;, new String[]{&quot;id&quot;});
		rs = stmt.getGeneratedKeys();
		if(rs.next()) {
			idApp = rs.getString(1);
			log.info(&quot;The application &apos;&quot;+vars.get(&quot;DATABASE_APP&quot;)+&quot;&apos; has been inserted in db. ID: &quot;+idApp);
		}
	}
	rs.close();

	stmt = conn.createStatement();
	stmt.executeUpdate(&quot;INSERT INTO build (id_application,build_number,technology) VALUES (&quot;+idApp+&quot;,&quot;+0+&quot;,&apos;JMeter&apos;)&quot;, new String[]{&quot;id&quot;});
	rs = stmt.getGeneratedKeys();
	if (rs.next()) {
		idBuild = rs.getString(1);
		log.info(&quot;The build with build_number &apos;&quot;+0+&quot;&apos; has been inserted in db. ID: &quot;+idBuild);
	}

	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from environment where name=&apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos;&quot;);
	if(rs.next()) {
		idEnv = rs.getString(1);
		log.info(&quot;The environment &apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos; existed already in db. ID: &quot;+idEnv);
	}else {
		rs.close();
		Statement stmt = conn.createStatement();
		stmt.executeUpdate(&quot;INSERT INTO environment (name) VALUES (&apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos;)&quot;, new String[]{&quot;id&quot;});
		rs = stmt.getGeneratedKeys();
		if(rs.next()) {
			idEnv = rs.getString(1);
			log.info(&quot;The environment &apos;&quot;+vars.get(&quot;ENVIRONMENT&quot;)+&quot;&apos; has been inserted in db. ID: &quot;+idEnv);
		}
	}
	rs.close();

	String idExec = &quot;&quot;;
	
	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from execution order by id DESC&quot;);
	if(rs.next()) {
		idExec = rs.getString(1);
	}
	
	//create table jmeter_metrics (
	//  sample_time timestamp,
	//  label varchar(90) not null,success
	//  success varchar(32) not null,
	//  response_code varchar(32) not null,
	//  response_time_ms int,
	//  primary key (sample_time,label)
	//);
	        
	
	long time = System.currentTimeMillis();
	java.sql.Timestamp ts = new java.sql.Timestamp(time);
	log.info(&quot;Time in milliseconds :&quot; + ts);
		 
     String query = &quot; insert into test (start_date, name, status, response_code, duration, id_suite, thread_group)&quot;
        + &quot; values (?, ?, ?, ?, ?, ?, ?)&quot;;
      // create the mysql insert preparedstatement
      PreparedStatement preparedStmt = conn.prepareStatement(query);
	
	props.put(&quot;databaseConn&quot;, conn);
	      // the mysql insert statement
	props.put(&quot;insertStatement&quot;, preparedStmt);
	props.put(&quot;idBuild&quot;, idBuild);
	props.put(&quot;iteration&quot;,0);
	props.put(&quot;idEnv&quot;,idEnv);
	props.put(&quot;lastExecId&quot;,idExec);
	      
	//      preparedStmt.setTimestamp   (1, ts);
	//      preparedStmt.setString (2, &quot;label1&quot;);
	//      preparedStmt.setString (3, &quot;true&quot;);
	//      preparedStmt.setString (4, &quot;200&quot;);
	//      preparedStmt.setInt    (5, 5000);
	
	      // execute the preparedstatement
	//      preparedStmt.execute();
      
      //conn.close();
    }
    catch (Exception e)
    {
      log.error(&quot;Got an exception!&quot;);
      log.info( &quot;print&quot; + e );
    }

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Insertar_ejecucion" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.sql.*;
import org.apache.jmeter.samplers.SampleResult;
import java.text.SimpleDateFormat;

try
{
	//Parece que al insertar tan rápido, no se da cuenta de que hay un registro ya insertado.
	try {Thread.sleep(500);} catch (InterruptedException e) {}

	SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
	String idExec = &quot;&quot;;

	log.info(&quot;INSERTANDO EXECUTION&quot;);

	Connection conn = (Connection) props.get(&quot;databaseConn&quot;);
	
	Statement stmt = conn.createStatement();
	stmt.executeUpdate(&quot;INSERT INTO execution (start_date,execution_type,id_build,id_environment) VALUES(&apos;&quot;+sdf.format(new java.util.Date())+&quot;&apos;,&apos;Performance&apos;,&quot;+props.get(&quot;idBuild&quot;)+&quot;,&apos;&quot;+props.get(&quot;idEnv&quot;)+&quot;&apos;)&quot;, Statement.RETURN_GENERATED_KEYS);
	rs = stmt.getGeneratedKeys();
	if (rs.next()) {
		idExec = rs.getString(1);
		log.info(&quot;The Execution has been inserted in db. ID: &quot;+idExec);
	}


	log.error(&quot;INSERTANDO EXECUTION ---------------&quot;+idExec);
	
	props.put(&quot;idExec&quot;,idExec);


    }
catch (Exception e)
{
 log.error(&quot;Got an exception!&quot;);
 log.info( &quot;print&quot; + e );
 log.error(e.getMessage());
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.sql.*;
import org.apache.jmeter.samplers.SampleResult;
import java.text.SimpleDateFormat;

if(!sampleResult.getSampleLabel().equals(&quot;Insertar_ejecucion&quot;)){
    try
    {
    	SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
    	
	log.info(&quot;Inserting in database...&quot;);
     String myDriver = &quot;com.mysql.jdbc.Driver&quot;;
	 String myUrl = &quot;jdbc:mysql://mysql/grafana?serverTimezone=UTC+1&quot;;
     Class.forName(myDriver);
	String database_user = vars.get(&quot;DATABASE_USR&quot;);
	String database_pwd = vars.get(&quot;DATABASE_PWD&quot;);

     Connection conn = DriverManager.getConnection(myUrl, database_user, database_pwd);

	//long time = Long.parseLong(vars.get(&quot;sample_timestamp&quot;));//System.currentTimeMillis();
	//java.sql.Timestamp ts = new java.sql.Timestamp(time);
	//System.out.println(&quot;Time in milliseconds :&quot; + ts);
	String idSuite = &quot;&quot;;
	String idExec = props.get(&quot;idExec&quot;);

	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(&quot;Select id from suite where name=&apos;&quot;+sampleResult.getSampleLabel()+&quot;&apos; and id_execution =&quot;+idExec);
	if(rs.next()) {
		idSuite = rs.getString(1);
	}else{
		stmt = conn.createStatement();
		try {Thread.sleep(500);} catch (InterruptedException e) {}
		stmt.executeUpdate(&quot;insert into suite (id_execution,software_delivery, name, start_date) values (&apos;&quot;+idExec+
		&quot;&apos;,&apos;null&apos;,&apos;&quot;+sampleResult.getSampleLabel()+&quot;&apos;,&apos;&quot;+new java.sql.Timestamp(sampleResult.getTimeStamp())+&quot;&apos;)&quot;, new String[]{&quot;id&quot;});
		rs = stmt.getGeneratedKeys();
		if(rs.next()) {
			idSuite = rs.getString(1);
		}
	}
	
	for(SampleResult sr : sampleResult.getSubResults()){
		//Connection conn = (Connection) props.get(&quot;databaseConn&quot;);
		PreparedStatement preparedStmt = (PreparedStatement) props.get(&quot;insertStatement&quot;);
	
		String isSuccessfull = &quot;OK&quot;;
		if (!sr.isSuccessful()) {
			System.out.println(&quot;ERRORRRRR&quot;);
			isSuccessfull = &quot;Error&quot;;
		}
	
	      // create the mysql insert preparedstatement
		String sampleLabel = sr.getSampleLabel();
		if (sampleLabel.length() &gt; 89) {
			sampleLabel = sr.getSampleLabel().substring(0,89);
		}
	
		String responseCode = sr.getResponseCode();
		if (responseCode.length() &gt; 29) {
			responseCode = sr.getResponseCode().substring(0,29);
		}
	
	      
	      preparedStmt.setTimestamp   (1, new java.sql.Timestamp(sr.getTimeStamp()));
	      preparedStmt.setString (2, sampleLabel);
	      preparedStmt.setString (3, isSuccessfull);
	      preparedStmt.setString (4, responseCode);
	      preparedStmt.setInt    (5, (int)sr.getTime());
	      preparedStmt.setInt    (6, Integer.valueOf(idSuite));
	      preparedStmt.setString    (7, ctx.getThread().getThreadName());
	      
	      // execute the preparedstatement
	      preparedStmt.execute();
	      
	      //conn.close();
	}

	String success = sampleResult.isSuccessful()?&quot;OK&quot;:&quot;Error&quot;;
	Statement stmt = conn.createStatement();
	stmt.executeUpdate(&quot;UPDATE suite set duration=&quot;+sampleResult.getTime()+&quot;, status=&apos;&quot;+success+&quot;&apos; where id =&quot;+idSuite);
	
	
    }
    catch (Exception e)
    {
      log.error(&quot;Got an exception!&quot;);
      log.error(e.getMessage());
    }
}
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Listener>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaccion1__" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">example.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/index.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">es-ES</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html, application/xhtml+xml, image/jxr, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">500</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name">Transaccion1__</stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">recording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Escritor de Datos Simple" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${RUTA_BASE}resultados/${__time(yyyyMMdd-HHmmss)}_estabilidad.txt</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Escritor de Datos Errores" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${RUTA_BASE}resultados/${__time(yyyyMMdd-HHmmss)}_estabilidad.err</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
